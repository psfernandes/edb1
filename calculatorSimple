#include <iostream>
#include <cctype>
#include <cstdlib>
#include <stack>
#include <string>

//Calculadora infixa

int calculate(std::string);
bool isoperator(char);
int priority(char);
int process(int l, int r, char op);

int main(int argc, char const *argv[]) {
	if(argc < 2){
		std::cout << "Informe a expressao" << std::endl;
		return 0;
	}

	std::string expression = argv[1];
	//Vamos ter que criar o código da nossa pilha, mas para esse exemplo vamos usar a do c++ para agilizar (stack)
	//expression.size(); retorna a quantidade de bytes, caso haja algo acentuado. Se nada for acentuado retorna a quantidade normal de elementos
	int result = calculate(expression);
	
	std::cout << expression << " = " << result << std::endl;

	return 0;
}

int calculate(std::string expression) { //O string expression é um array de char
	std::stack<int> operands;
	std::stack<char> operators;

	for (int i = 0; i < expression.size(); ++i) {
		char c = expression[i];

		if(isdigit(c)){
			int digit = static_cast<int>(c-48);
			operands.push(digit);
		} else if(isoperator(c)){
			if(operators.empty()){
				operators.push(c);
			} else {
				int p = priority(c);
				if(p > priority(operators.top())){
					//adicionamos na pilha
					operators.push(c);
				} else {
					while(!operators.empty() && priority(operators.top()) > p){ //Enquanto houver operators essa parte roda
						int r = operands.top();
						operands.pop();

						int l = operands.top();
						operands.pop();

						int result = process(l, r, operators.top()); //Se eu recebo 1 2 + retorna 3
						operands.push(result);
						operators.pop();
					}
					operators.push(c);
				}
			}
		}

		std::cout << c << std::endl;
	}

	while(!operators.empty()){ //Pego dois números, faço a operação e devolvo para a pilha
		int r = operands.top();
		operands.pop();

		int l = operands.top();
		operands.pop();

		int result = process(l, r, operators.top()); //Se eu recebo 1 2 + retorna 3
		operands.push(result);
		operators.pop();
	}

	return operands.top(); //Só terá um elemento, que é o resultado final
}

bool isoperator(char c){
	return c == '+' || c == '-' || c == '*' || c == '/';
}

int priority(char c){
	if(c == '+' || c == '-'){
		return 1;
	} else if(c == '*' || c == '/'){
		return 2;
	}

	return 0;
}

int process(int l, int r, char op){
	if(op == '+'){
		return l + r;
	} else if(op == '-'){
		return l - r;
	} else if(op == '*'){
		return l * r;
	} else if(op == '/'){
		return l / r;
	}

	return 0;
}
